/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "resources.h.fsl"

#define PI 3.14159265359f


RES(Tex2D(float4), AlbedoTexture, UPDATE_FREQ_NONE, t1, binding = 1);
RES(Tex2D(float4), MaterialPropsTexture, UPDATE_FREQ_NONE, t2, binding = 1);
RES(Tex2D(float4), NormalDepthTexture, UPDATE_FREQ_NONE, t3, binding = 1);

RES(SamplerState,  uSampler0, UPDATE_FREQ_NONE, s0, binding = 2);


STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float4, UV,   TEXCOORD);
};

struct FragInfo {
	float3 albedo;
	float metallic;
	float roughness;
	float ao;
	float3 normal;
	float3 worldPosition;
};

FragInfo Unpack(VSOutput In) {
	FragInfo result;

	float2 fragCoord = In.Position.xy / Get(ScreenDims.xy);

	result.albedo = saturate(SampleTex2D(Get(AlbedoTexture), Get(uSampler0), fragCoord).rgb);
	result.metallic = saturate(SampleTex2D(Get(MaterialPropsTexture), Get(uSampler0), fragCoord).r);
	result.roughness = SampleTex2D(Get(MaterialPropsTexture), Get(uSampler0), fragCoord).g;
	result.ao = saturate(SampleTex2D(Get(MaterialPropsTexture), Get(uSampler0), fragCoord).b);

	result.normal = SampleTex2D(Get(NormalDepthTexture), Get(uSampler0), fragCoord).rgb;
	result.normal = normalize(result.normal * 2.0f - 1.0f);



	float depth = SampleTex2D(Get(NormalDepthTexture), Get(uSampler0), fragCoord).a;


	float4 projPos = float4(fragCoord.x * 2.0f - 1.0f, (1.0f - fragCoord.y) * 2.0f - 1.0f, depth, 1.0f);
	float4 worldPos = mul(Get(mViewInv), mul(Get(mProjInv), projPos));


	result.worldPosition = worldPos.xyz / max(0.0001f, worldPos.w);

	return result;
}

float DistributionGGX(float3 N, float3 H, float roughness)
{
	float a = roughness*roughness;
	float a2 = a*a;
	float NdotH = max(dot(N, H), 0.0);
	float NdotH2 = NdotH*NdotH;
	float num = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float num = NdotV;
	float denom = NdotV * (1.0 - k) + k;
	return num / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);
	return ggx1 * ggx2;
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float4 PS_MAIN( VSOutput In )
{
    INIT_MAIN;

	FragInfo info = Unpack(In);

	float3 view = normalize(Get(cameraPosition.xyz) - info.worldPosition);

	float3 F0 = f3(0.1f);
	F0 = lerp(F0, info.albedo, info.metallic);

	
	float3 color = f3(0.0f);

	for (int i = 0; i < POINT_LIGHT_COUNT; i++) {
		float3 lightDir = normalize(Get(lights[i].position) - info.worldPosition);
		float3 halfway = normalize(lightDir + view);

		float distance = length(Get(lights[i].position) - info.worldPosition);
		float attenuation = 1.0f / (distance * distance);

		float3 radiance = float3(1.0f, 1.0f, 0.4f) * attenuation;

		float N = DistributionGGX(info.normal, halfway, info.roughness);
		float G = GeometrySmith(info.normal, view, lightDir, info.roughness);
		float3 F = fresnelSchlick(max(dot(halfway, view), 0.0), F0);

		float3 diffuse = f3(1.0f) - F;
		diffuse *= 1.0f - info.metallic;


		float3 num = N * G * F;
		float denom = 4.0f * max(dot(info.normal, view), 0.0) * max(dot(info.normal, lightDir), 0.0);

		float3 specular = num / max(denom, 0.001f);

		float NdotL = max(dot(info.normal, lightDir), 0.0);

		float3 result = (diffuse * info.albedo / PI + specular) * radiance * NdotL;
		color += result;
	}

	float3 ambient = f3(0.03f) * info.albedo * info.ao;
	color += ambient;

	color = color / (color + f3(1.0f));

	color = pow(abs(color), f3(1.0f / 2.2f));

	float4 Out = f4(0.0f);
	Out += float4(color, 1.0f);
	Out += 0.000001f * f4(info.metallic);
	Out += 0.000001f * f4(info.roughness);
	Out += 0.000001f * f4(info.ao);
	Out += 0.000001f * float4(info.normal, 0.0f);
	Out += 0.000001f * float4(info.worldPosition, 0.0f);
	//Out += 0.000001f * float4(color, 1.0f);


    RETURN(Out);
}
