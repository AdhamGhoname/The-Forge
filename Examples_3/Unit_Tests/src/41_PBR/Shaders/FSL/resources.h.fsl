/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef RESOURCES_H
#define RESOURCES_H

#define POINT_LIGHT_COUNT 4

struct PointLight {
	float3 position;
	float attenuation;
	float4 baseColor;
};

CBUFFER(uniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
    DATA(float4x4, mModel, None);
    DATA(float4x4, mView, None);
    DATA(float4x4, mProj, None);

	DATA(float4x4, mModelInv, None);
    DATA(float4x4, mViewInv, None);
    DATA(float4x4, mProjInv, None);

	DATA(float4, cameraPosition, None);
	DATA(float4, ScreenDims, None);

	DATA(PointLight, lights[POINT_LIGHT_COUNT], None);
};


STRUCT(PSOutput)
{
	DATA(uint2, packed, SV_Target0);
};

struct GBufferProps {
	float3 albedo;
	float metallic;
	float roughness;
	float3 normals;
	float depth;
};

uint PackNormalOct(float3 normal) {
    normal /= (abs(normal.x) + abs(normal.y) + abs(normal.z));  // Project onto octahedron
    normal.xy = (normal.xy + 1.0f) / 2.0f * 255.0f;
    uint packedNormal = uint(round(normal.y)) << 8 | uint(round(normal.x));
    return packedNormal;
}

PSOutput Pack(const GBufferProps props) {
	PSOutput Out = {u2(0)};

	uint3 albedo = uint3(round(props.albedo * 255.0f));
	Out.packed.x |= (albedo.r << 24 | albedo.g << 16 | albedo.b << 8);

	uint2 met_rough = uint2(round(float2(props.metallic, props.roughness) * 15.0f));
	Out.packed.x |= (met_rough.r << 4 | met_rough.g);

	uint depth = uint(round(props.depth * 65535.0f));
	Out.packed.y |= (depth << 16);

	uint normals = PackNormalOct(props.normals);
	Out.packed.y |= normals;

	return Out;
}

struct FragInfo {
	float3 albedo;
	float metallic;
	float roughness;
	float3 normal;
	float3 worldPosition;
};

float3 UnpackNormalOct(uint packedNormal) {
    float3 normal = float3(float(packedNormal & 0xFF), float((packedNormal >> 8) & 0xFF), 0.0f);
    normal.xy /= 255.0f * 0.5f;  // Scale to [-1,1] range
	normal.xy -= 1.0f;
    normal.z = 1.0f - abs(normal.x) - abs(normal.y);  // Reconstruct z component
    return normalize(normal);
}

FragInfo Unpack(uint2 In, float2 uv) {
	FragInfo info;
	float2 fragCoord = uv;

	info.albedo = float3(
		(In.x >> 24) / 255.0f,
		((In.x >> 16) & 0xFF) / 255.0f,
		((In.x >> 8) & 0xFF) / 255.0f
	);
	info.metallic = ((In.x >> 4) & 0xF) / 15.0f;
	info.roughness = (In.x & 0xF) / 15.0f;

	uint packedNormal = In.y & 0xFFFF;

	info.normal = UnpackNormalOct(packedNormal);

	float depth = (In.y >> 16) / 65535.0f;

	float4 projPos = float4(fragCoord.x * 2.0f - 1.0f, (1.0f - fragCoord.y) * 2.0f - 1.0f, depth, 1.0f);
	float4 worldPos = mul(Get(mViewInv), mul(Get(mProjInv), projPos));
	info.worldPosition = worldPos.xyz / max(0.0001f, worldPos.w);

	return info;
}

#endif