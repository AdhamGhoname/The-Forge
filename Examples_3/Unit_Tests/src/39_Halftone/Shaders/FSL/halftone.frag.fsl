/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// Shader for Skybox in Unit Test 01 - Transformations

#include "resources.h.fsl"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float4, WorldPosition, POSITION);
    DATA(float4, Normal, NORMAL);
    DATA(float4, UV, TEXCOORD);
};

float3 getBackgroundColor(float2 uv) {
    return lerp(float3(0.0f, 0.25f, 0.28f), float3(0.0f, 0.30f, 0.33f), 1.0f - pow(dot(abs(uv), float2(1.0f, 1.0f)), 1.0f));
}

float3 dirLighting(float2 uv, VSOutput In, float4 lightDirection) {
	float3 direction = normalize(-lightDirection).xyz;
	float3 view = normalize(In.WorldPosition - Get(cameraPosition)).xyz;
    float3 normal = normalize(In.Normal).xyz;
    float intensity = 0.2f + max(0.0f, dot(direction, normal)) + pow(max(0.0f, dot(view, normal)), 32.0f);
	float thresh = Get(ScreenDimsAndThreshold).z;

    float halfToneValue = SampleTex2D(Get(RightText), Get(uSampler0), uv * 4.0f).r;
    float tint = step(halfToneValue + thresh, intensity);
    return lerp(getBackgroundColor(uv), float3(1.0f, 1.0f, 1.0f), tint);
}


float4 PS_MAIN( VSOutput In )
{
    INIT_MAIN;
    float4 Out;
	float2 ScreenDims = Get(ScreenDimsAndThreshold).xy;
    float2 texcoord = (2.0f * In.Position.xy - ScreenDims.xy) / ScreenDims.y;
	texcoord = (texcoord + 1.0f) / 2.0f;
	Out = float4(0.0f, 0.0f, 0.0f, 0.0f);
	for (int i = 0; i < 2; i++) {
		Out = float4(dirLighting(texcoord, In, Get(lightDirections[i])), 1.0f);
	}
    RETURN(Out);
}
