/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// Shader for Skybox in Unit Test 01 - Transformations

#ifndef BLUEPRINT_SHADER
	#define BLUEPRINT_SHADER
#endif
#include "resources.h.fsl"

#define SS_GRID_CELL_SIZE 20.0f
#define WS_GRID_CELL_SIZE 0.1f


STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float4, UV,   TEXCOORD);
};

float4 PS_MAIN( VSOutput In )
{
    INIT_MAIN;
	float3 delta = float3(1.0f / Get(ScreenDimsWorldDims).rg, 0.0f);

    float4 dxyz = SampleTex2D(Get(DepthTexture), Get(uSampler0), In.UV.rg);

    float o = dxyz.w;
	float x = SampleTex2D(Get(DepthTexture), Get(uSampler0), In.UV.rg + delta.xz).w;
	float y = SampleTex2D(Get(DepthTexture), Get(uSampler0), In.UV.rg + delta.zy).w;
	float ox = x - o;
	float oy = y - o;

	float2 coord = Get(ScreenDimsWorldDims).xy * (0.5f - In.UV.xy);

	float4 bg = float4(.07, .3, .7, 1.);

	//small lines
	float2 a = smoothstep(0.07f, 0.0f, abs(0.5f - frac(coord / SS_GRID_CELL_SIZE)));
    bg += 0.125f * (a.x + a.y);

    //big lines
    float2 b = smoothstep(0.01f, 0.0f, abs(0.5f - frac(coord / (SS_GRID_CELL_SIZE*5.0f))));
    bg += 0.25 * (b.x + b.y);

	// add geometry grid

	float3 worldCoord = (0.5f - dxyz.xyz) * Get(ScreenDimsWorldDims).z;

	float3 c = step(abs(0.5f - frac(worldCoord / WS_GRID_CELL_SIZE)), f3(0.45f));
	//bg += 0.5 * min(c.x, c.z);



	float4 fg = float4(206, 216, 247, 255) / 255.0f;

	float4 Out = lerp(bg, fg, 1.0f - step(abs(dot(dxyz.xyz, f3(1.0f))), 0.01f));



	Out = pow(Out, f4(2.2f));
    RETURN(Out);
}
